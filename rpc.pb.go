// Code generated by protoc-gen-go.
// source: rpc.proto
// DO NOT EDIT!

/*
Package hexalog is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	Entry
	RPCRequest
	RequestOptions
	RPCResponse
*/
package hexalog

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import hexaring "github.com/hexablock/hexaring"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Entry struct {
	Previous  []byte `protobuf:"bytes,1,opt,name=Previous,json=previous,proto3" json:"Previous,omitempty"`
	Timestamp uint64 `protobuf:"varint,2,opt,name=Timestamp,json=timestamp" json:"Timestamp,omitempty"`
	Height    uint32 `protobuf:"varint,3,opt,name=Height,json=height" json:"Height,omitempty"`
	Key       []byte `protobuf:"bytes,4,opt,name=Key,json=key,proto3" json:"Key,omitempty"`
	Data      []byte `protobuf:"bytes,5,opt,name=Data,json=data,proto3" json:"Data,omitempty"`
}

func (m *Entry) Reset()                    { *m = Entry{} }
func (m *Entry) String() string            { return proto.CompactTextString(m) }
func (*Entry) ProtoMessage()               {}
func (*Entry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Entry) GetPrevious() []byte {
	if m != nil {
		return m.Previous
	}
	return nil
}

func (m *Entry) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Entry) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Entry) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Entry) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type RPCRequest struct {
	ID      []byte          `protobuf:"bytes,1,opt,name=ID,json=iD,proto3" json:"ID,omitempty"`
	Entry   *Entry          `protobuf:"bytes,2,opt,name=Entry,json=entry" json:"Entry,omitempty"`
	Options *RequestOptions `protobuf:"bytes,3,opt,name=Options,json=options" json:"Options,omitempty"`
}

func (m *RPCRequest) Reset()                    { *m = RPCRequest{} }
func (m *RPCRequest) String() string            { return proto.CompactTextString(m) }
func (*RPCRequest) ProtoMessage()               {}
func (*RPCRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RPCRequest) GetID() []byte {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *RPCRequest) GetEntry() *Entry {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (m *RPCRequest) GetOptions() *RequestOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

type RequestOptions struct {
	// Index of the source in the PeerSet.  This is set internally by the log
	SourceIndex int32 `protobuf:"varint,1,opt,name=SourceIndex,json=sourceIndex" json:"SourceIndex,omitempty"`
	// Set of peers for the request.
	PeerSet []*hexaring.Location `protobuf:"bytes,2,rep,name=PeerSet,json=peerSet" json:"PeerSet,omitempty"`
}

func (m *RequestOptions) Reset()                    { *m = RequestOptions{} }
func (m *RequestOptions) String() string            { return proto.CompactTextString(m) }
func (*RequestOptions) ProtoMessage()               {}
func (*RequestOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RequestOptions) GetSourceIndex() int32 {
	if m != nil {
		return m.SourceIndex
	}
	return 0
}

func (m *RequestOptions) GetPeerSet() []*hexaring.Location {
	if m != nil {
		return m.PeerSet
	}
	return nil
}

type RPCResponse struct {
	Entry *Entry `protobuf:"bytes,1,opt,name=Entry,json=entry" json:"Entry,omitempty"`
}

func (m *RPCResponse) Reset()                    { *m = RPCResponse{} }
func (m *RPCResponse) String() string            { return proto.CompactTextString(m) }
func (*RPCResponse) ProtoMessage()               {}
func (*RPCResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RPCResponse) GetEntry() *Entry {
	if m != nil {
		return m.Entry
	}
	return nil
}

func init() {
	proto.RegisterType((*Entry)(nil), "hexalog.Entry")
	proto.RegisterType((*RPCRequest)(nil), "hexalog.RPCRequest")
	proto.RegisterType((*RequestOptions)(nil), "hexalog.RequestOptions")
	proto.RegisterType((*RPCResponse)(nil), "hexalog.RPCResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for HexalogRPC service

type HexalogRPCClient interface {
	ProposeRPC(ctx context.Context, in *RPCRequest, opts ...grpc.CallOption) (*RPCResponse, error)
	CommitRPC(ctx context.Context, in *RPCRequest, opts ...grpc.CallOption) (*RPCResponse, error)
	GetRPC(ctx context.Context, in *RPCRequest, opts ...grpc.CallOption) (*RPCResponse, error)
	TransferKeylogRPC(ctx context.Context, opts ...grpc.CallOption) (HexalogRPC_TransferKeylogRPCClient, error)
}

type hexalogRPCClient struct {
	cc *grpc.ClientConn
}

func NewHexalogRPCClient(cc *grpc.ClientConn) HexalogRPCClient {
	return &hexalogRPCClient{cc}
}

func (c *hexalogRPCClient) ProposeRPC(ctx context.Context, in *RPCRequest, opts ...grpc.CallOption) (*RPCResponse, error) {
	out := new(RPCResponse)
	err := grpc.Invoke(ctx, "/hexalog.HexalogRPC/ProposeRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hexalogRPCClient) CommitRPC(ctx context.Context, in *RPCRequest, opts ...grpc.CallOption) (*RPCResponse, error) {
	out := new(RPCResponse)
	err := grpc.Invoke(ctx, "/hexalog.HexalogRPC/CommitRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hexalogRPCClient) GetRPC(ctx context.Context, in *RPCRequest, opts ...grpc.CallOption) (*RPCResponse, error) {
	out := new(RPCResponse)
	err := grpc.Invoke(ctx, "/hexalog.HexalogRPC/GetRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hexalogRPCClient) TransferKeylogRPC(ctx context.Context, opts ...grpc.CallOption) (HexalogRPC_TransferKeylogRPCClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_HexalogRPC_serviceDesc.Streams[0], c.cc, "/hexalog.HexalogRPC/TransferKeylogRPC", opts...)
	if err != nil {
		return nil, err
	}
	x := &hexalogRPCTransferKeylogRPCClient{stream}
	return x, nil
}

type HexalogRPC_TransferKeylogRPCClient interface {
	Send(*RPCRequest) error
	Recv() (*RPCRequest, error)
	grpc.ClientStream
}

type hexalogRPCTransferKeylogRPCClient struct {
	grpc.ClientStream
}

func (x *hexalogRPCTransferKeylogRPCClient) Send(m *RPCRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *hexalogRPCTransferKeylogRPCClient) Recv() (*RPCRequest, error) {
	m := new(RPCRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for HexalogRPC service

type HexalogRPCServer interface {
	ProposeRPC(context.Context, *RPCRequest) (*RPCResponse, error)
	CommitRPC(context.Context, *RPCRequest) (*RPCResponse, error)
	GetRPC(context.Context, *RPCRequest) (*RPCResponse, error)
	TransferKeylogRPC(HexalogRPC_TransferKeylogRPCServer) error
}

func RegisterHexalogRPCServer(s *grpc.Server, srv HexalogRPCServer) {
	s.RegisterService(&_HexalogRPC_serviceDesc, srv)
}

func _HexalogRPC_ProposeRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HexalogRPCServer).ProposeRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hexalog.HexalogRPC/ProposeRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HexalogRPCServer).ProposeRPC(ctx, req.(*RPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HexalogRPC_CommitRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HexalogRPCServer).CommitRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hexalog.HexalogRPC/CommitRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HexalogRPCServer).CommitRPC(ctx, req.(*RPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HexalogRPC_GetRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HexalogRPCServer).GetRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hexalog.HexalogRPC/GetRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HexalogRPCServer).GetRPC(ctx, req.(*RPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HexalogRPC_TransferKeylogRPC_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HexalogRPCServer).TransferKeylogRPC(&hexalogRPCTransferKeylogRPCServer{stream})
}

type HexalogRPC_TransferKeylogRPCServer interface {
	Send(*RPCRequest) error
	Recv() (*RPCRequest, error)
	grpc.ServerStream
}

type hexalogRPCTransferKeylogRPCServer struct {
	grpc.ServerStream
}

func (x *hexalogRPCTransferKeylogRPCServer) Send(m *RPCRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *hexalogRPCTransferKeylogRPCServer) Recv() (*RPCRequest, error) {
	m := new(RPCRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _HexalogRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hexalog.HexalogRPC",
	HandlerType: (*HexalogRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProposeRPC",
			Handler:    _HexalogRPC_ProposeRPC_Handler,
		},
		{
			MethodName: "CommitRPC",
			Handler:    _HexalogRPC_CommitRPC_Handler,
		},
		{
			MethodName: "GetRPC",
			Handler:    _HexalogRPC_GetRPC_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TransferKeylogRPC",
			Handler:       _HexalogRPC_TransferKeylogRPC_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 400 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x5f, 0x6b, 0xd4, 0x40,
	0x14, 0xc5, 0x3b, 0xfb, 0x2f, 0xcd, 0x8d, 0x2e, 0x3a, 0x8a, 0x86, 0xc5, 0x87, 0x10, 0x7c, 0x08,
	0x28, 0xa9, 0xa6, 0x08, 0xfa, 0x9c, 0x15, 0x5b, 0x2a, 0x18, 0xa6, 0xfd, 0x00, 0xce, 0xa6, 0xd7,
	0x64, 0x68, 0x93, 0x19, 0x67, 0x26, 0xd2, 0x3c, 0xf9, 0xc9, 0x05, 0xd9, 0x49, 0xda, 0xa5, 0x50,
	0x0a, 0xfb, 0x36, 0xf7, 0x77, 0xe7, 0x9e, 0x7b, 0xce, 0x30, 0xe0, 0x6b, 0x55, 0xa6, 0x4a, 0x4b,
	0x2b, 0xa9, 0x57, 0xe3, 0x0d, 0xbf, 0x96, 0xd5, 0xea, 0x5d, 0x25, 0x6c, 0xdd, 0x6d, 0xd2, 0x52,
	0x36, 0x47, 0x5b, 0xb6, 0xb9, 0x96, 0xe5, 0x95, 0x3b, 0x69, 0xd1, 0x56, 0x47, 0xc6, 0xea, 0xae,
	0xb4, 0x66, 0x98, 0x8a, 0xff, 0xc2, 0xfc, 0x6b, 0x6b, 0x75, 0x4f, 0x57, 0x70, 0x58, 0x68, 0xfc,
	0x23, 0x64, 0x67, 0x42, 0x12, 0x91, 0xe4, 0x09, 0x3b, 0x54, 0x63, 0x4d, 0xdf, 0x80, 0x7f, 0x21,
	0x1a, 0x34, 0x96, 0x37, 0x2a, 0x9c, 0x44, 0x24, 0x99, 0x31, 0xdf, 0xde, 0x02, 0xfa, 0x0a, 0x16,
	0x27, 0x28, 0xaa, 0xda, 0x86, 0xd3, 0x88, 0x24, 0x4f, 0xd9, 0xa2, 0x76, 0x15, 0x7d, 0x06, 0xd3,
	0x33, 0xec, 0xc3, 0x99, 0x13, 0x9b, 0x5e, 0x61, 0x4f, 0x29, 0xcc, 0xd6, 0xdc, 0xf2, 0x70, 0xee,
	0xd0, 0xec, 0x92, 0x5b, 0x1e, 0x77, 0x00, 0xac, 0xc8, 0x19, 0xfe, 0xee, 0xd0, 0x58, 0xba, 0x84,
	0xc9, 0xe9, 0x7a, 0xdc, 0x3f, 0x11, 0x6b, 0xfa, 0x76, 0xb4, 0xe7, 0xb6, 0x06, 0xd9, 0x32, 0x1d,
	0x43, 0xa6, 0x8e, 0xb2, 0x39, 0x3a, 0xef, 0x1f, 0xc1, 0xfb, 0xa1, 0xac, 0x90, 0xad, 0x71, 0x16,
	0x82, 0xec, 0xf5, 0xdd, 0xbd, 0x51, 0x78, 0x6c, 0x33, 0x4f, 0x0e, 0x87, 0xf8, 0x27, 0x2c, 0xef,
	0xb7, 0x68, 0x04, 0xc1, 0xb9, 0xec, 0x74, 0x89, 0xa7, 0xed, 0x25, 0xde, 0x38, 0x0f, 0x73, 0x16,
	0x98, 0x1d, 0xa2, 0xef, 0xc1, 0x2b, 0x10, 0xf5, 0x39, 0xda, 0x70, 0x12, 0x4d, 0x93, 0x20, 0xa3,
	0xe9, 0xed, 0xab, 0xa6, 0xdf, 0x65, 0xc9, 0xb7, 0x3a, 0xcc, 0x53, 0xc3, 0x95, 0xf8, 0x18, 0x02,
	0x17, 0xcc, 0x28, 0xd9, 0x1a, 0xdc, 0x25, 0x21, 0x8f, 0x24, 0xc9, 0xfe, 0x11, 0x80, 0x93, 0xa1,
	0xc1, 0x8a, 0x9c, 0x7e, 0x01, 0x28, 0xb4, 0x54, 0xd2, 0xe0, 0xb6, 0x7a, 0xb1, 0x4b, 0x75, 0xf7,
	0x62, 0xab, 0x97, 0xf7, 0xe1, 0xb0, 0x2d, 0x3e, 0xa0, 0x9f, 0xc1, 0xcf, 0x65, 0xd3, 0x08, 0xbb,
	0xf7, 0xe4, 0x27, 0x58, 0x7c, 0xc3, 0xfd, 0xc7, 0x72, 0x78, 0x7e, 0xa1, 0x79, 0x6b, 0x7e, 0xa1,
	0x3e, 0xc3, 0x7e, 0x0c, 0xf0, 0xa0, 0xc2, 0x43, 0x30, 0x3e, 0x48, 0xc8, 0x07, 0xb2, 0x59, 0xb8,
	0x5f, 0x79, 0xfc, 0x3f, 0x00, 0x00, 0xff, 0xff, 0xcf, 0xaa, 0x51, 0x5b, 0xd8, 0x02, 0x00, 0x00,
}
