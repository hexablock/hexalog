// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

/*
Package hexalog is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	Entry
	UnsafeKeylogIndex
	KeySeed
	ReqResp
	RequestOptions
	Participant
*/
package hexalog

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Hexalog entry
type Entry struct {
	Key       []byte `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Previous  []byte `protobuf:"bytes,2,opt,name=Previous,proto3" json:"Previous,omitempty"`
	Height    uint32 `protobuf:"varint,3,opt,name=Height" json:"Height,omitempty"`
	Timestamp uint64 `protobuf:"varint,4,opt,name=Timestamp" json:"Timestamp,omitempty"`
	LTime     uint64 `protobuf:"varint,5,opt,name=LTime" json:"LTime,omitempty"`
	Data      []byte `protobuf:"bytes,6,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *Entry) Reset()                    { *m = Entry{} }
func (m *Entry) String() string            { return proto.CompactTextString(m) }
func (*Entry) ProtoMessage()               {}
func (*Entry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Entry) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Entry) GetPrevious() []byte {
	if m != nil {
		return m.Previous
	}
	return nil
}

func (m *Entry) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Entry) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Entry) GetLTime() uint64 {
	if m != nil {
		return m.LTime
	}
	return 0
}

func (m *Entry) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// UnsafeKeylogIndex is an in-memory keylog index. This is the base class for all
// implementations of KeylogIndex
type UnsafeKeylogIndex struct {
	// Key for the index
	Key []byte `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	// Current height of the keylog
	Height uint32 `protobuf:"varint,2,opt,name=Height" json:"Height,omitempty"`
	// Used to mark an incomplete log
	Marker []byte `protobuf:"bytes,3,opt,name=Marker,proto3" json:"Marker,omitempty"`
	// LamportClock based on the last write
	LTime uint64 `protobuf:"varint,4,opt,name=LTime" json:"LTime,omitempty"`
	// Entry ids
	Entries [][]byte `protobuf:"bytes,5,rep,name=Entries,proto3" json:"Entries,omitempty"`
}

func (m *UnsafeKeylogIndex) Reset()                    { *m = UnsafeKeylogIndex{} }
func (m *UnsafeKeylogIndex) String() string            { return proto.CompactTextString(m) }
func (*UnsafeKeylogIndex) ProtoMessage()               {}
func (*UnsafeKeylogIndex) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UnsafeKeylogIndex) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *UnsafeKeylogIndex) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *UnsafeKeylogIndex) GetMarker() []byte {
	if m != nil {
		return m.Marker
	}
	return nil
}

func (m *UnsafeKeylogIndex) GetLTime() uint64 {
	if m != nil {
		return m.LTime
	}
	return 0
}

func (m *UnsafeKeylogIndex) GetEntries() [][]byte {
	if m != nil {
		return m.Entries
	}
	return nil
}

type KeySeed struct {
	Key    []byte `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Height uint32 `protobuf:"varint,2,opt,name=Height" json:"Height,omitempty"`
	Marker []byte `protobuf:"bytes,3,opt,name=Marker,proto3" json:"Marker,omitempty"`
	LTime  uint64 `protobuf:"varint,4,opt,name=LTime" json:"LTime,omitempty"`
}

func (m *KeySeed) Reset()                    { *m = KeySeed{} }
func (m *KeySeed) String() string            { return proto.CompactTextString(m) }
func (*KeySeed) ProtoMessage()               {}
func (*KeySeed) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *KeySeed) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *KeySeed) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *KeySeed) GetMarker() []byte {
	if m != nil {
		return m.Marker
	}
	return nil
}

func (m *KeySeed) GetLTime() uint64 {
	if m != nil {
		return m.LTime
	}
	return 0
}

// Request and response shared structure for hexalog
type ReqResp struct {
	// ID is based on the request/response
	ID      []byte          `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Entry   *Entry          `protobuf:"bytes,2,opt,name=Entry" json:"Entry,omitempty"`
	Options *RequestOptions `protobuf:"bytes,3,opt,name=Options" json:"Options,omitempty"`
	// Response fields
	BallotTime int64 `protobuf:"varint,4,opt,name=BallotTime" json:"BallotTime,omitempty"`
	ApplyTime  int64 `protobuf:"varint,5,opt,name=ApplyTime" json:"ApplyTime,omitempty"`
}

func (m *ReqResp) Reset()                    { *m = ReqResp{} }
func (m *ReqResp) String() string            { return proto.CompactTextString(m) }
func (*ReqResp) ProtoMessage()               {}
func (*ReqResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ReqResp) GetID() []byte {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *ReqResp) GetEntry() *Entry {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (m *ReqResp) GetOptions() *RequestOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *ReqResp) GetBallotTime() int64 {
	if m != nil {
		return m.BallotTime
	}
	return 0
}

func (m *ReqResp) GetApplyTime() int64 {
	if m != nil {
		return m.ApplyTime
	}
	return 0
}

// Hexalog request options
type RequestOptions struct {
	// Index of the source in the PeerSet.  This is set internally by the log
	SourceIndex int32 `protobuf:"varint,1,opt,name=SourceIndex" json:"SourceIndex,omitempty"`
	// Set of peers for the request.
	PeerSet []*Participant `protobuf:"bytes,2,rep,name=PeerSet" json:"PeerSet,omitempty"`
	// Wait on ballot before returning
	WaitBallot bool `protobuf:"varint,5,opt,name=WaitBallot" json:"WaitBallot,omitempty"`
	// Wait for fsm to apply entry after ballot is closed. This should take
	// effect only if WaitBallot is also true
	WaitApply bool `protobuf:"varint,6,opt,name=WaitApply" json:"WaitApply,omitempty"`
	// Apply timeout in ms.  This only takes effect if WaitApply is also set
	WaitApplyTimeout int32 `protobuf:"varint,7,opt,name=WaitApplyTimeout" json:"WaitApplyTimeout,omitempty"`
}

func (m *RequestOptions) Reset()                    { *m = RequestOptions{} }
func (m *RequestOptions) String() string            { return proto.CompactTextString(m) }
func (*RequestOptions) ProtoMessage()               {}
func (*RequestOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RequestOptions) GetSourceIndex() int32 {
	if m != nil {
		return m.SourceIndex
	}
	return 0
}

func (m *RequestOptions) GetPeerSet() []*Participant {
	if m != nil {
		return m.PeerSet
	}
	return nil
}

func (m *RequestOptions) GetWaitBallot() bool {
	if m != nil {
		return m.WaitBallot
	}
	return false
}

func (m *RequestOptions) GetWaitApply() bool {
	if m != nil {
		return m.WaitApply
	}
	return false
}

func (m *RequestOptions) GetWaitApplyTimeout() int32 {
	if m != nil {
		return m.WaitApplyTimeout
	}
	return 0
}

type Participant struct {
	ID []byte `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// Host:port
	Host string `protobuf:"bytes,2,opt,name=Host" json:"Host,omitempty"`
	// Priority among locations in a set
	Priority int32 `protobuf:"varint,3,opt,name=Priority" json:"Priority,omitempty"`
	// Index within location group
	Index int32 `protobuf:"varint,4,opt,name=Index" json:"Index,omitempty"`
}

func (m *Participant) Reset()                    { *m = Participant{} }
func (m *Participant) String() string            { return proto.CompactTextString(m) }
func (*Participant) ProtoMessage()               {}
func (*Participant) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Participant) GetID() []byte {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *Participant) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Participant) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *Participant) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func init() {
	proto.RegisterType((*Entry)(nil), "hexalog.Entry")
	proto.RegisterType((*UnsafeKeylogIndex)(nil), "hexalog.UnsafeKeylogIndex")
	proto.RegisterType((*KeySeed)(nil), "hexalog.KeySeed")
	proto.RegisterType((*ReqResp)(nil), "hexalog.ReqResp")
	proto.RegisterType((*RequestOptions)(nil), "hexalog.RequestOptions")
	proto.RegisterType((*Participant)(nil), "hexalog.Participant")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for HexalogRPC service

type HexalogRPCClient interface {
	ProposeRPC(ctx context.Context, in *ReqResp, opts ...grpc.CallOption) (*ReqResp, error)
	CommitRPC(ctx context.Context, in *ReqResp, opts ...grpc.CallOption) (*ReqResp, error)
	NewRPC(ctx context.Context, in *ReqResp, opts ...grpc.CallOption) (*ReqResp, error)
	GetRPC(ctx context.Context, in *ReqResp, opts ...grpc.CallOption) (*ReqResp, error)
	LastRPC(ctx context.Context, in *ReqResp, opts ...grpc.CallOption) (*ReqResp, error)
	// Push a keylog from a given seek position
	PushKeylogRPC(ctx context.Context, opts ...grpc.CallOption) (HexalogRPC_PushKeylogRPCClient, error)
	// Pull a keylog
	PullKeylogRPC(ctx context.Context, opts ...grpc.CallOption) (HexalogRPC_PullKeylogRPCClient, error)
	// Seed keys to build the log
	SeedKeysRPC(ctx context.Context, in *ReqResp, opts ...grpc.CallOption) (HexalogRPC_SeedKeysRPCClient, error)
}

type hexalogRPCClient struct {
	cc *grpc.ClientConn
}

func NewHexalogRPCClient(cc *grpc.ClientConn) HexalogRPCClient {
	return &hexalogRPCClient{cc}
}

func (c *hexalogRPCClient) ProposeRPC(ctx context.Context, in *ReqResp, opts ...grpc.CallOption) (*ReqResp, error) {
	out := new(ReqResp)
	err := grpc.Invoke(ctx, "/hexalog.HexalogRPC/ProposeRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hexalogRPCClient) CommitRPC(ctx context.Context, in *ReqResp, opts ...grpc.CallOption) (*ReqResp, error) {
	out := new(ReqResp)
	err := grpc.Invoke(ctx, "/hexalog.HexalogRPC/CommitRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hexalogRPCClient) NewRPC(ctx context.Context, in *ReqResp, opts ...grpc.CallOption) (*ReqResp, error) {
	out := new(ReqResp)
	err := grpc.Invoke(ctx, "/hexalog.HexalogRPC/NewRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hexalogRPCClient) GetRPC(ctx context.Context, in *ReqResp, opts ...grpc.CallOption) (*ReqResp, error) {
	out := new(ReqResp)
	err := grpc.Invoke(ctx, "/hexalog.HexalogRPC/GetRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hexalogRPCClient) LastRPC(ctx context.Context, in *ReqResp, opts ...grpc.CallOption) (*ReqResp, error) {
	out := new(ReqResp)
	err := grpc.Invoke(ctx, "/hexalog.HexalogRPC/LastRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hexalogRPCClient) PushKeylogRPC(ctx context.Context, opts ...grpc.CallOption) (HexalogRPC_PushKeylogRPCClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_HexalogRPC_serviceDesc.Streams[0], c.cc, "/hexalog.HexalogRPC/PushKeylogRPC", opts...)
	if err != nil {
		return nil, err
	}
	x := &hexalogRPCPushKeylogRPCClient{stream}
	return x, nil
}

type HexalogRPC_PushKeylogRPCClient interface {
	Send(*ReqResp) error
	Recv() (*ReqResp, error)
	grpc.ClientStream
}

type hexalogRPCPushKeylogRPCClient struct {
	grpc.ClientStream
}

func (x *hexalogRPCPushKeylogRPCClient) Send(m *ReqResp) error {
	return x.ClientStream.SendMsg(m)
}

func (x *hexalogRPCPushKeylogRPCClient) Recv() (*ReqResp, error) {
	m := new(ReqResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hexalogRPCClient) PullKeylogRPC(ctx context.Context, opts ...grpc.CallOption) (HexalogRPC_PullKeylogRPCClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_HexalogRPC_serviceDesc.Streams[1], c.cc, "/hexalog.HexalogRPC/PullKeylogRPC", opts...)
	if err != nil {
		return nil, err
	}
	x := &hexalogRPCPullKeylogRPCClient{stream}
	return x, nil
}

type HexalogRPC_PullKeylogRPCClient interface {
	Send(*ReqResp) error
	Recv() (*ReqResp, error)
	grpc.ClientStream
}

type hexalogRPCPullKeylogRPCClient struct {
	grpc.ClientStream
}

func (x *hexalogRPCPullKeylogRPCClient) Send(m *ReqResp) error {
	return x.ClientStream.SendMsg(m)
}

func (x *hexalogRPCPullKeylogRPCClient) Recv() (*ReqResp, error) {
	m := new(ReqResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hexalogRPCClient) SeedKeysRPC(ctx context.Context, in *ReqResp, opts ...grpc.CallOption) (HexalogRPC_SeedKeysRPCClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_HexalogRPC_serviceDesc.Streams[2], c.cc, "/hexalog.HexalogRPC/SeedKeysRPC", opts...)
	if err != nil {
		return nil, err
	}
	x := &hexalogRPCSeedKeysRPCClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HexalogRPC_SeedKeysRPCClient interface {
	Recv() (*KeySeed, error)
	grpc.ClientStream
}

type hexalogRPCSeedKeysRPCClient struct {
	grpc.ClientStream
}

func (x *hexalogRPCSeedKeysRPCClient) Recv() (*KeySeed, error) {
	m := new(KeySeed)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for HexalogRPC service

type HexalogRPCServer interface {
	ProposeRPC(context.Context, *ReqResp) (*ReqResp, error)
	CommitRPC(context.Context, *ReqResp) (*ReqResp, error)
	NewRPC(context.Context, *ReqResp) (*ReqResp, error)
	GetRPC(context.Context, *ReqResp) (*ReqResp, error)
	LastRPC(context.Context, *ReqResp) (*ReqResp, error)
	// Push a keylog from a given seek position
	PushKeylogRPC(HexalogRPC_PushKeylogRPCServer) error
	// Pull a keylog
	PullKeylogRPC(HexalogRPC_PullKeylogRPCServer) error
	// Seed keys to build the log
	SeedKeysRPC(*ReqResp, HexalogRPC_SeedKeysRPCServer) error
}

func RegisterHexalogRPCServer(s *grpc.Server, srv HexalogRPCServer) {
	s.RegisterService(&_HexalogRPC_serviceDesc, srv)
}

func _HexalogRPC_ProposeRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqResp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HexalogRPCServer).ProposeRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hexalog.HexalogRPC/ProposeRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HexalogRPCServer).ProposeRPC(ctx, req.(*ReqResp))
	}
	return interceptor(ctx, in, info, handler)
}

func _HexalogRPC_CommitRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqResp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HexalogRPCServer).CommitRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hexalog.HexalogRPC/CommitRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HexalogRPCServer).CommitRPC(ctx, req.(*ReqResp))
	}
	return interceptor(ctx, in, info, handler)
}

func _HexalogRPC_NewRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqResp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HexalogRPCServer).NewRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hexalog.HexalogRPC/NewRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HexalogRPCServer).NewRPC(ctx, req.(*ReqResp))
	}
	return interceptor(ctx, in, info, handler)
}

func _HexalogRPC_GetRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqResp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HexalogRPCServer).GetRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hexalog.HexalogRPC/GetRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HexalogRPCServer).GetRPC(ctx, req.(*ReqResp))
	}
	return interceptor(ctx, in, info, handler)
}

func _HexalogRPC_LastRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqResp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HexalogRPCServer).LastRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hexalog.HexalogRPC/LastRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HexalogRPCServer).LastRPC(ctx, req.(*ReqResp))
	}
	return interceptor(ctx, in, info, handler)
}

func _HexalogRPC_PushKeylogRPC_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HexalogRPCServer).PushKeylogRPC(&hexalogRPCPushKeylogRPCServer{stream})
}

type HexalogRPC_PushKeylogRPCServer interface {
	Send(*ReqResp) error
	Recv() (*ReqResp, error)
	grpc.ServerStream
}

type hexalogRPCPushKeylogRPCServer struct {
	grpc.ServerStream
}

func (x *hexalogRPCPushKeylogRPCServer) Send(m *ReqResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *hexalogRPCPushKeylogRPCServer) Recv() (*ReqResp, error) {
	m := new(ReqResp)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _HexalogRPC_PullKeylogRPC_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HexalogRPCServer).PullKeylogRPC(&hexalogRPCPullKeylogRPCServer{stream})
}

type HexalogRPC_PullKeylogRPCServer interface {
	Send(*ReqResp) error
	Recv() (*ReqResp, error)
	grpc.ServerStream
}

type hexalogRPCPullKeylogRPCServer struct {
	grpc.ServerStream
}

func (x *hexalogRPCPullKeylogRPCServer) Send(m *ReqResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *hexalogRPCPullKeylogRPCServer) Recv() (*ReqResp, error) {
	m := new(ReqResp)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _HexalogRPC_SeedKeysRPC_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReqResp)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HexalogRPCServer).SeedKeysRPC(m, &hexalogRPCSeedKeysRPCServer{stream})
}

type HexalogRPC_SeedKeysRPCServer interface {
	Send(*KeySeed) error
	grpc.ServerStream
}

type hexalogRPCSeedKeysRPCServer struct {
	grpc.ServerStream
}

func (x *hexalogRPCSeedKeysRPCServer) Send(m *KeySeed) error {
	return x.ServerStream.SendMsg(m)
}

var _HexalogRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hexalog.HexalogRPC",
	HandlerType: (*HexalogRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProposeRPC",
			Handler:    _HexalogRPC_ProposeRPC_Handler,
		},
		{
			MethodName: "CommitRPC",
			Handler:    _HexalogRPC_CommitRPC_Handler,
		},
		{
			MethodName: "NewRPC",
			Handler:    _HexalogRPC_NewRPC_Handler,
		},
		{
			MethodName: "GetRPC",
			Handler:    _HexalogRPC_GetRPC_Handler,
		},
		{
			MethodName: "LastRPC",
			Handler:    _HexalogRPC_LastRPC_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PushKeylogRPC",
			Handler:       _HexalogRPC_PushKeylogRPC_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "PullKeylogRPC",
			Handler:       _HexalogRPC_PullKeylogRPC_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SeedKeysRPC",
			Handler:       _HexalogRPC_SeedKeysRPC_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 552 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x94, 0xd1, 0x6e, 0xd3, 0x3e,
	0x14, 0xc6, 0x97, 0x26, 0x69, 0xd6, 0x93, 0xae, 0xea, 0xdf, 0x9a, 0xf6, 0x8f, 0x26, 0x84, 0xaa,
	0x88, 0x8b, 0x88, 0x8b, 0xb2, 0x15, 0x71, 0xc1, 0x25, 0xac, 0x88, 0x56, 0x1d, 0x10, 0xb9, 0x20,
	0xae, 0x4d, 0x77, 0x68, 0x23, 0xd2, 0x3a, 0xb3, 0x5d, 0x58, 0x1e, 0x80, 0x47, 0xe0, 0x3d, 0xe0,
	0x3d, 0x78, 0x28, 0x64, 0x27, 0x4d, 0x33, 0x15, 0x89, 0x15, 0x89, 0x3b, 0x7f, 0x9f, 0x7d, 0x72,
	0x7e, 0xf1, 0x97, 0x13, 0x68, 0x89, 0x6c, 0xd6, 0xcf, 0x04, 0x57, 0x9c, 0x78, 0x0b, 0xbc, 0x61,
	0x29, 0x9f, 0x87, 0xdf, 0x2c, 0x70, 0x5f, 0xac, 0x94, 0xc8, 0x49, 0x17, 0xec, 0x09, 0xe6, 0x81,
	0xd5, 0xb3, 0xa2, 0x36, 0xd5, 0x4b, 0x72, 0x0a, 0x87, 0xb1, 0xc0, 0xcf, 0x09, 0x5f, 0xcb, 0xa0,
	0x61, 0xec, 0x4a, 0x93, 0x13, 0x68, 0x8e, 0x30, 0x99, 0x2f, 0x54, 0x60, 0xf7, 0xac, 0xe8, 0x88,
	0x96, 0x8a, 0xdc, 0x83, 0xd6, 0xdb, 0x64, 0x89, 0x52, 0xb1, 0x65, 0x16, 0x38, 0x3d, 0x2b, 0x72,
	0xe8, 0xd6, 0x20, 0xc7, 0xe0, 0x5e, 0x6a, 0x15, 0xb8, 0x66, 0xa7, 0x10, 0x84, 0x80, 0x33, 0x64,
	0x8a, 0x05, 0x4d, 0xd3, 0xc3, 0xac, 0xc3, 0xaf, 0x16, 0xfc, 0xf7, 0x6e, 0x25, 0xd9, 0x47, 0x9c,
	0x60, 0x9e, 0xf2, 0xf9, 0x78, 0x75, 0x85, 0x37, 0xbf, 0x61, 0xdc, 0x72, 0x34, 0x6e, 0x71, 0x9c,
	0x40, 0xf3, 0x15, 0x13, 0x9f, 0x50, 0x18, 0xbe, 0x36, 0x2d, 0xd5, 0x96, 0xc0, 0xa9, 0x13, 0x04,
	0xe0, 0xe9, 0x4b, 0x48, 0x50, 0x06, 0x6e, 0xcf, 0x8e, 0xda, 0x74, 0x23, 0x43, 0x06, 0xde, 0x04,
	0xf3, 0x29, 0xe2, 0xd5, 0xbf, 0x6a, 0x1e, 0x7e, 0xb7, 0xc0, 0xa3, 0x78, 0x4d, 0x51, 0x66, 0xa4,
	0x03, 0x8d, 0xf1, 0xb0, 0x6c, 0xd1, 0x18, 0x0f, 0xc9, 0x83, 0x32, 0x1d, 0xd3, 0xc0, 0x1f, 0x74,
	0xfa, 0x65, 0x6e, 0x7d, 0xe3, 0xd2, 0x32, 0xba, 0x73, 0xf0, 0xde, 0x64, 0x2a, 0xe1, 0x2b, 0x69,
	0x1a, 0xfa, 0x83, 0xff, 0xab, 0x73, 0x14, 0xaf, 0xd7, 0x28, 0x55, 0xb9, 0x4d, 0x37, 0xe7, 0xc8,
	0x7d, 0x80, 0xe7, 0x2c, 0x4d, 0xb9, 0xaa, 0x78, 0x6c, 0x5a, 0x73, 0x74, 0x8e, 0xcf, 0xb2, 0x2c,
	0xcd, 0xab, 0xb4, 0x6c, 0xba, 0x35, 0xc2, 0x9f, 0x16, 0x74, 0x6e, 0x3f, 0x99, 0xf4, 0xc0, 0x9f,
	0xf2, 0xb5, 0x98, 0xa1, 0x49, 0xca, 0xbc, 0x82, 0x4b, 0xeb, 0x16, 0xe9, 0x83, 0x17, 0x23, 0x8a,
	0x29, 0xea, 0xeb, 0xb2, 0x23, 0x7f, 0x70, 0x5c, 0x51, 0xc6, 0x4c, 0xa8, 0x64, 0x96, 0x64, 0x6c,
	0xa5, 0xe8, 0xe6, 0x90, 0x46, 0x7c, 0xcf, 0x12, 0x55, 0x40, 0x19, 0x86, 0x43, 0x5a, 0x73, 0x34,
	0xa2, 0x56, 0x86, 0xca, 0x7c, 0x3b, 0x87, 0x74, 0x6b, 0x90, 0x87, 0xd0, 0xad, 0x84, 0x66, 0xe6,
	0x6b, 0x15, 0x78, 0x06, 0x6a, 0xc7, 0x0f, 0x67, 0xe0, 0xd7, 0x08, 0x76, 0x42, 0x20, 0xe0, 0x8c,
	0xb8, 0x2c, 0x42, 0x6e, 0x51, 0xb3, 0x2e, 0x66, 0x23, 0xe1, 0x22, 0x51, 0xb9, 0xb9, 0x73, 0x97,
	0x56, 0x5a, 0xc7, 0x5c, 0x5c, 0x82, 0x63, 0x36, 0x0a, 0x31, 0xf8, 0x61, 0x03, 0x8c, 0x8a, 0xf7,
	0xa5, 0xf1, 0x05, 0x19, 0x00, 0xc4, 0x82, 0x67, 0x5c, 0xa2, 0x56, 0xdd, 0x7a, 0x60, 0xfa, 0x4b,
	0x38, 0xdd, 0x71, 0xc2, 0x03, 0x72, 0x0e, 0xad, 0x0b, 0xbe, 0x5c, 0x26, 0xea, 0xee, 0x25, 0x7d,
	0x68, 0xbe, 0xc6, 0x2f, 0x7b, 0x9d, 0x7f, 0x89, 0x7b, 0x3c, 0xff, 0x11, 0x78, 0x97, 0x4c, 0xee,
	0x51, 0xf0, 0x14, 0x8e, 0xe2, 0xb5, 0x5c, 0x14, 0x53, 0x7d, 0xe7, 0xb2, 0xc8, 0x3a, 0xb3, 0x8a,
	0xd2, 0x34, 0xfd, 0x9b, 0xd2, 0x27, 0xe0, 0xeb, 0x19, 0x9e, 0x60, 0x2e, 0xff, 0x54, 0x58, 0x8e,
	0x7b, 0x78, 0x70, 0x66, 0x7d, 0x68, 0x9a, 0xbf, 0xe5, 0xe3, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff,
	0xd9, 0x22, 0xe7, 0x31, 0x3a, 0x05, 0x00, 0x00,
}
